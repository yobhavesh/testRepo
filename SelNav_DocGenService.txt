/***************************************************************************
// (c) 2016 Appirio, Inc.
//
// Description  : Rest Api which returns related Estimate__c records according to GUID provided in RestContext
//
// Arp 14 , 2016   : Simranjeet Singh T-493248
// June 29, 2016   : Dharmesh Patel I-224631 : Support DocGenServices.getDocumentFields for Non-logged in user
// July 15, 2016   : Dharmesh Patel I-226117 : SIT- Project Pricing Summary document should not displaying percent values for Cost Groups Items
// July 15, 2016   : Dharmesh Patel I-225943 : SIT- Project Pricing Summary Report Not matching with the UI
// July 21, 2016   : Dharmesh Patel I-226824 : SIT - Project Pricing Summary : Sell Price % should be always be NULL
// Aug 11, 2016 : Simranjeet Singh S-429494 : SelNavDev2 - Added condition to add address for project conatct with multiple contact role
//***************************************************************************/

@RestResource(urlMapping='/DocGenService/*')
global with sharing class SelNav_DocGenService {

    public static map<String,Decimal> descriptionMarkupMap = new map<String,Decimal>();
    public static final String CONTROLS_PRODUCTS_COST = 'Controls Product Cost';
    public static final String LABOR_COST = 'Labor Cost';
    public static final String OTHER_COST = 'Other Cost';
    public static final String GUID_NOT_VALID = 'GUID is not valid.';
    public static final String ORDER_SHIP_TO = 'Order Ship To';
    public static final String CUSTOMER = 'Customer';
    public static final String SITE_OWNER = 'Site Owner';
    public static final String FREIGHT_LI = 'Freight';
    public static final String ACCRUEDUSETAX_LI = 'AccruedUseTax';
    public static final String ACCRUEDUSETAX_DISPLAY = 'Accrued Use Tax';
    public static final String WARRANTY_LI = 'Warranty';
    public static final String MARGIN_LI = 'Margin';
    public static final String SELL_PRICE_LI = 'SellPrice';
    public static final String SELL_PRICE_DISPLAY = 'SELL PRICE';  // I-225943
    public static final String NET_ESTIMATE_COST_LI = 'NetEstimateCost'; // I-225943
    public static final String NET_ESTIMATE_COST_DISPLAY = 'NET ESTIMATE COST'; // I-225943
    public static final String TOTAL_COST_CI = 'TotalCost';
    public static final String TOTAL_COST_DISPLAY = 'TOTAL COST'; // I-225943
    public static final String SELL_PRICE = 'Sell Price';
    public static final String PROJECT_CREATE_DATE_DI = 'ProjectCreateDate';
    public static final String PROJECT_CREATE_DATE_DISPLAY = 'Project Create Date';
    public static final String PROPOSAL_DUE_DATE_DI = 'DueDate';
    public static final String PROPOSAL_DUE_DATE_DISPLAY = 'Project Due Date';
    public static final String BOOKED_DATE_DI = 'BookedDate';
    public static final String BOOKED_DATE_DISPLAY = 'Booked Date';
    public static final String SUBMITTAL_DUE_DATE_DI = 'SubmittalDueDate';
    public static final String SUBMITTAL_DUE_DATE_DISPLAY = 'Submittal Due Date';
    public static final String COMPLETION_DATE_DI = 'CompletionDate';
    public static final String COMPLETION_DATE_DISPLAY = 'Completion Date';
    public static final String COMPANY_LOGO_NAME = 'documentlogo'; //Updated by Rohit Mathur Aug-22-2016 (S-436574) [Changed COMPANY_LOGO_NAME from "accountlogo" to "documentlogo".]
    public static final String DEFAULT_LOGO_NAME = 'defaultlogo';
    public static final String PROJECT_ACCOUNT = 'Project Account';
    public static final String PROJECT_PROFILE = 'Project Profile'; 
    public static String UserID;
    //Http Get method
    //Params: RestContext parameter "guid"
    //Returns : List of Estimate__c records matching GUID
    @HttpGet
    global static ReturnClass getDocumentFields() {
        //Get Guid from RestContext (e.g. " /services/apexrest/DocGenService/getDocumentFields?guid=ff98fd28-08c6-4a2c-aedb-d79855a29bb5&userid=0051900000174bv" ) 
        // "userid" param is optional

        String GUID = RestContext.request.params.get('guid');

        UserId = UserInfo.getUserId();
        if (RestContext.request.params.get('userid') != '' && RestContext.request.params.get('userid') != null) {
            UserID = RestContext.request.params.get('userid');
        }

        if(GUID  == ''){
            return new ReturnClass('204', false, GUID_NOT_VALID , null); // return status code 204
        }

        list<Estimate__c> estList = new list<Estimate__c>();    
        list<SelNav_DocGenServiceWrappper.cls_User> usrLst = new list<SelNav_DocGenServiceWrappper.cls_User>();
        SelNav_DocGenServiceWrappper docGenWrapper ;
        SelNav_DocGenServiceWrappper.cls_Address address = new SelNav_DocGenServiceWrappper.cls_Address();
        SelNav_DocGenServiceWrappper.cls_Company company = new SelNav_DocGenServiceWrappper.cls_Company();
        list<SelNav_DocGenServiceWrappper.cls_ShipTo> addressShipToLst = new list<SelNav_DocGenServiceWrappper.cls_ShipTo>();
        list<SelNav_DocGenServiceWrappper.cls_Customer> addressCustomerLst = new list<SelNav_DocGenServiceWrappper.cls_Customer>();
        list<SelNav_DocGenServiceWrappper.cls_Site> addressSiteLst = new list<SelNav_DocGenServiceWrappper.cls_Site>();
        list<SelNav_DocGenServiceWrappper.cls_OtherAddresses> addressOtherLst = new list<SelNav_DocGenServiceWrappper.cls_OtherAddresses>();
        list<SelNav_DocGenServiceWrappper.cls_Date> docGenDateLst = new list<SelNav_DocGenServiceWrappper.cls_Date>();
        SelNav_DocGenServiceWrappper.cls_ShipTo addressShipTo;
        SelNav_DocGenServiceWrappper.cls_Customer addressCustomer;
        SelNav_DocGenServiceWrappper.cls_Site addressSite;
        SelNav_DocGenServiceWrappper.cls_OtherAddresses addressOther;
        SelNav_DocGenServiceWrappper.cls_OrderInfo orderInfo = new SelNav_DocGenServiceWrappper.cls_OrderInfo();
        SelNav_DocGenServiceWrappper.cls_EstimateSummary estimateSummary = new SelNav_DocGenServiceWrappper.cls_EstimateSummary();
        list<SelNav_DocGenServiceWrappper.cls_Costs> costsLst = new list<SelNav_DocGenServiceWrappper.cls_Costs>();set<String> addressIds = new set<String>();
        map<String,list<SelNav_DocGenServiceWrappper.cls_Lines>> categCostLineListMap = new map<String,list<SelNav_DocGenServiceWrappper.cls_Lines>>();
        SelNav_DocGenServiceWrappper.cls_Costs costItemTotal;

        Decimal freight = 0;
        Decimal tax = 0;
        Decimal warranty = 0;
        Decimal margin = 0;
        //Update query to get createDate - I-223438 - SS
        try{// Get Estimate Details for EStimate Guid passed to web service.
            estList = [SELECT id,Project__c, Project__r.CreatedDate, Project__r.Comments__c,Project__r.Project_Profile__c,
                       Project__r.PO_Number__c, Project__r.Order_Date__c, Project__r.Mark_Shipment__c,
                       Project__r.Proposal_Due_Date__c,Project__r.Booked_Date__c,Project__r.Submittal_Due_Date__c,Margin__c,
                       Project__r.Completion_Date__c,Project__r.Requested_Dock_Date__c,Freight__c,Tax__c,Project__r.Project_Navigator_Account__c,Warranty__c,
                       (SELECT Amount__c, Category_ID__c, Category_Name__c, Cost_Group__c, Cost_Group_Code__c,
                               Description__c, Estimate__c FROM Estimate_Items__r)
                               FROM Estimate__c 
                               WHERE Estimate_GUID__c =: GUID 
                               LIMIT 1];

            if(estList.size() < 1){
                return new ReturnClass('204', false, GUID_NOT_VALID, null); // return status code 204
            } 
            usrLst = createUserAddress(estList[0]);         //Get User Address
            for(Estimate__c estimate : estList) {
                docGenDateLst = populateDateValues(estimate);
                company = populateCompanyValues(estimate);
                orderInfo = populateOrderInfoValues(estimate);//Populate values for EstimateSummary element Wrapper - Start
                Integer costLineNumber = 0;

                for(Estimate_Item__c estimateItem : estimate.Estimate_Items__r){
                    SelNav_DocGenServiceWrappper.cls_Lines costLine = new SelNav_DocGenServiceWrappper.cls_Lines();
                    costLine.LineIdentifier  = estimateItem.Cost_Group_Code__c;
                    if(costLine.LineIdentifier != null)
                        costLine.LineIdentifier = costLine.LineIdentifier.trim();
                    costLine.SequenceNumber = String.valueOf(++costLineNumber);
                    costLine.Display = estimateItem.Cost_Group__c;
                    costLine.Amount = String.valueOf(estimateItem.Amount__c);
                    costLine.Percentage = null; // I-226117 : Changes made by Dharmesh Patel
                    if (!categCostLineListMap.containsKey(estimateItem.category_Name__c)) {
                        categCostLineListMap.put(estimateItem.category_Name__c, new list<SelNav_DocGenServiceWrappper.cls_Lines>());
                    }
                    categCostLineListMap.get(estimateItem.category_Name__c).add(costLine);
                }

                freight = estimate.Freight__c == null ? 0 : estimate.Freight__c;
                tax = estimate.Tax__c == null ? 0 : estimate.Tax__c;
                warranty = estimate.Warranty__c == null ? 0 : estimate.Warranty__c;
                margin = estimate.Margin__c == null ? 0 : estimate.Margin__c;
            }

            //Prepare Total Cost and Sell Price Summary 
            SelNav_DocGenServiceWrappper.cls_Costs costItem;
            Integer costItemNumber = 0;
            Decimal sumCPC = 0;
            Decimal sumLabor = 0;
            Decimal sumOther = 0;
            Decimal totalCost = 0;
            Decimal marginAmount = 0;

            for(String categName : categCostLineListMap.keySet()) {             //Prepare Category wise sum
                Decimal totAmount = 0;
                costItem = new SelNav_DocGenServiceWrappper.cls_Costs();
                costItem.Lines = new list<SelNav_DocGenServiceWrappper.cls_Lines>();
                costItem.CostIdentifier = categName.trim();
                costItem.SequenceNumber = String.valueOf(++costItemNumber);
                costItem.DisplayName = categName + ' Summary';
                costItem.IsTotalSection = String.valueOf(false);
                costItem.Lines = categCostLineListMap.get(categName);

                for(SelNav_DocGenServiceWrappper.cls_Lines line : categCostLineListMap.get(categName)){
                    if(line != null){
                        totAmount = totAmount + Decimal.valueOf(line.Amount);
                        if(categName == CONTROLS_PRODUCTS_COST) {
                            sumCPC = totAmount;
                        } else if(categName == LABOR_COST) {
                            sumLabor = totAmount;
                        } else if(categName == OTHER_COST) {
                            sumOther = totAmount;
                        }
                    }
                }
                costItem.TotalCost = String.valueOf(totAmount);
                costsLst.add(costItem);
            }

            // I-225943 - CHANGES START

            //calculate total cost - I-221870 SS
            totalCost = sumCPC + sumLabor + sumOther + (freight/100)*sumCPC + (tax/100)*sumCPC + (warranty/100)*sumCPC;
            Decimal NetEstimateCost = sumCPC + sumLabor + sumOther;

            //Add total cost section to response
            list<SelNav_DocGenServiceWrappper.cls_Lines> totalCostLinesLst = new list<SelNav_DocGenServiceWrappper.cls_Lines>();
            SelNav_DocGenServiceWrappper.cls_Lines NetEstimateCostLinesLst = new SelNav_DocGenServiceWrappper.cls_Lines();
            NetEstimateCostLinesLst.LineIdentifier  = NET_ESTIMATE_COST_LI;
            NetEstimateCostLinesLst.SequenceNumber = '1';
            NetEstimateCostLinesLst.Display = NET_ESTIMATE_COST_DISPLAY;
            NetEstimateCostLinesLst.Amount = String.valueOf(NetEstimateCost);
            NetEstimateCostLinesLst.Percentage = null;
            totalCostLinesLst.add(NetEstimateCostLinesLst);

            //Add total cost section to response
            SelNav_DocGenServiceWrappper.cls_Lines frightCostLine = new SelNav_DocGenServiceWrappper.cls_Lines();
            frightCostLine.LineIdentifier  = FREIGHT_LI;
            frightCostLine.SequenceNumber = '2';
            frightCostLine.Display = FREIGHT_LI;
            frightCostLine.Amount = String.valueOf((freight/100)*sumCPC);
            frightCostLine.Percentage = String.valueOf(freight);
            totalCostLinesLst.add(frightCostLine);

            SelNav_DocGenServiceWrappper.cls_Lines taxCostLine = new SelNav_DocGenServiceWrappper.cls_Lines();
            taxCostLine.LineIdentifier  = ACCRUEDUSETAX_LI;
            taxCostLine.SequenceNumber = '3';
            taxCostLine.Display = ACCRUEDUSETAX_DISPLAY;
            taxCostLine.Amount = String.valueOf((tax/100)*sumCPC);
            taxCostLine.Percentage = String.valueOf(tax);
            totalCostLinesLst.add(taxCostLine);

            SelNav_DocGenServiceWrappper.cls_Lines commisionCostLine = new SelNav_DocGenServiceWrappper.cls_Lines();
            commisionCostLine.LineIdentifier  = WARRANTY_LI;
            commisionCostLine.SequenceNumber = '4';
            commisionCostLine.Display = WARRANTY_LI;
            commisionCostLine.Amount =  String.valueOf((warranty/100)*sumCPC);  // previously hard coded here
            commisionCostLine.Percentage = String.valueOf(warranty);
            totalCostLinesLst.add(commisionCostLine);

            SelNav_DocGenServiceWrappper.cls_Lines TotalCostCostLine = new SelNav_DocGenServiceWrappper.cls_Lines();
            TotalCostCostLine.LineIdentifier  = TOTAL_COST_CI;
            TotalCostCostLine.SequenceNumber = '5';
            TotalCostCostLine.Display = TOTAL_COST_DISPLAY;
            TotalCostCostLine.Amount =  String.valueOf(totalCost);
            TotalCostCostLine.Percentage = null;
            totalCostLinesLst.add(TotalCostCostLine);

            if(margin == 100)
                marginAmount = totalCost;
            else
                marginAmount = (totalCost * ((margin/100)/(1-(margin/100)))).setScale(2);
            // Added margin and Sell Price - I-221870 SS
            SelNav_DocGenServiceWrappper.cls_Lines marginCostLine = new SelNav_DocGenServiceWrappper.cls_Lines();
            marginCostLine.LineIdentifier  = MARGIN_LI;
            marginCostLine.SequenceNumber = '6';
            marginCostLine.Display = MARGIN_LI;
            marginCostLine.Amount =  String.valueOf(marginAmount);
            marginCostLine.Percentage = String.valueOf(margin);
            totalCostLinesLst.add(marginCostLine);

            SelNav_DocGenServiceWrappper.cls_Lines sellPrice = new SelNav_DocGenServiceWrappper.cls_Lines();
            sellPrice.LineIdentifier  = SELL_PRICE_LI;
            sellPrice.SequenceNumber = '7';
            sellPrice.Display = SELL_PRICE_DISPLAY;
            sellPrice.Amount =  String.valueOf((totalCost + marginAmount).setScale(2));
            sellPrice.Percentage = null; // 7-21 Changes by Dharmesh I-226824 : made null from 0"
            totalCostLinesLst.add(sellPrice);

            costItemTotal = new SelNav_DocGenServiceWrappper.cls_Costs();
            costItemTotal.Lines = new list<SelNav_DocGenServiceWrappper.cls_Lines>();
            costItemTotal.CostIdentifier = SELL_PRICE_LI; //TOTAL_COST_CI;
            costItemTotal.SequenceNumber = '1';
            costItemTotal.DisplayName = 'Sell Price'; //TOTAL_COST_DISPLAY;
            costItemTotal.IsTotalSection = String.valueOf(true);
            costItemTotal.TotalCost = String.valueOf((totalCost + marginAmount).setScale(2)); //String.valueOf((totalCost).setScale(2));
            costItemTotal.Lines = totalCostLinesLst;

            // I-225943 CHANGES END

            costsLst.add(costItemTotal);
            estimateSummary.Costs = costsLst;

            for(Project_Contact_Address__c projConAddr : [SELECT Id,Address__c,Is_Primary__c,Address__r.Name,Address__r.Address_1__c,
                                                          Address__r.Address_2__c,Address__r.Country__c,Address__r.Zip__c,
                                                          Address__r.City__c,Address__r.State_Province__c,
                                                          Project_Contact__r.Contact_Role__c,Project_Contact__r.Email__c,Project_Contact__r.Name,
                                                          Project_Contact__r.Company__c,Project_Contact__r.Primary__c,
                                                          Project_Contact__r.First_Name__c,Project_Contact__r.Last_Name__c,
                                                          Project_Contact__r.Navigator_Contact__r.Phone__c,Project_Contact__r.Navigator_Contact__r.Fax__c,
                                                          Project_Contact__r.Title__c
                                                          FROM Project_Contact_Address__c
                                                          WHERE Project_Contact__r.project__c =: estList.get(0).Project__c
                                                          ]){
                if(projConAddr.Project_Contact__r.Contact_Role__c == null) {continue;}
                        // Handle multiple Contact roles for user. - S-429494 (split contact roles and loop over for each role - Update condition for other section also.)
                        String contactRoleValues = projConAddr.Project_Contact__r.Contact_Role__c;
                        list<String> contactRoleLst = contactRoleValues.split(';');

                        for(String contactRole : ContactRoleLst){
                            if(contactRole == ORDER_SHIP_TO && projConAddr.Is_Primary__c){
                                addressShipTo = new SelNav_DocGenServiceWrappper.cls_ShipTo();
                                // Modified by Rakshit for task T-509869
                                addressShipTo.AddressId = projConAddr.Address__c == null ? '' : projConAddr.Address__c ;
                                addressShipTo.ProjectRole = contactRole ;
                                addressShipTo.ContactName = projConAddr.Project_Contact__r.First_Name__c+' '+projConAddr.Project_Contact__r.Last_Name__c;
                                addressShipTo.CompanyName = projConAddr.Project_Contact__r.Company__c;
                                addressShipTo.Address1 = projConAddr.Address__r.Address_1__c;
                                addressShipTo.Address2 = projConAddr.Address__r.Address_2__c;
                                addressShipTo.City = projConAddr.Address__r.City__c;
                                addressShipTo.State = projConAddr.Address__r.State_Province__c;
                                addressShipTo.PostalCode = projConAddr.Address__r.Zip__c;
                                addressShipTo.Country = projConAddr.Address__r.Country__c;
                                addressShipTo.Phone = projConAddr.Project_Contact__r.Navigator_Contact__r.Phone__c;
                                addressShipTo.Fax = projConAddr.Project_Contact__r.Navigator_Contact__r.Fax__c;
                                addressShipTo.Email = projConAddr.Project_Contact__r.Email__c;
                                addressShipTo.IsPrimary = String.valueOf(projConAddr.Is_Primary__c);
                                //I-224812 - SS
                                addressShipTo.Title = projConAddr.Project_Contact__r.Title__c;
                                addressShipToLst.add(addressShipTo);

                            }else if(contactRole == CUSTOMER && projConAddr.Is_Primary__c){
                                addressCustomer = new SelNav_DocGenServiceWrappper.cls_Customer();
                                // Modified by Rakshit for task T-509869
                                addressCustomer.AddressId = projConAddr.Address__c == null ? '' : projConAddr.Address__c ;
                                addressCustomer.ProjectRole = contactRole;
                                addressCustomer.ContactName = projConAddr.Project_Contact__r.First_Name__c+' '+projConAddr.Project_Contact__r.Last_Name__c;
                                addressCustomer.CompanyName = projConAddr.Project_Contact__r.Company__c;
                                addressCustomer.Address1 = projConAddr.Address__r.Address_1__c;
                                addressCustomer.Address2 = projConAddr.Address__r.Address_2__c;
                                addressCustomer.City = projConAddr.Address__r.City__c;
                                addressCustomer.State = projConAddr.Address__r.State_Province__c;
                                addressCustomer.PostalCode = projConAddr.Address__r.Zip__c;
                                addressCustomer.Country = projConAddr.Address__r.Country__c;
                                addressCustomer.Phone = projConAddr.Project_Contact__r.Navigator_Contact__r.Phone__c;
                                addressCustomer.Fax = projConAddr.Project_Contact__r.Navigator_Contact__r.Fax__c;
                                addressCustomer.Email = projConAddr.Project_Contact__r.Email__c;
                                addressCustomer.IsPrimary = String.valueOf(projConAddr.Is_Primary__c);
                                //I-224812 - SS
                                addressCustomer.Title = projConAddr.Project_Contact__r.Title__c;
                                addressCustomerLst.add(addressCustomer);

                            }else if(contactRole == SITE_OWNER && projConAddr.Is_Primary__c){
                                addressSite = new SelNav_DocGenServiceWrappper.cls_Site();
                                // Modified by Rakshit for task T-509869
                                addressSite.AddressId = projConAddr.Address__c == null ? '' : projConAddr.Address__c;
                                addressSite.ProjectRole = contactRole;
                                addressSite.ContactName = projConAddr.Project_Contact__r.First_Name__c+' '+projConAddr.Project_Contact__r.Last_Name__c;
                                addressSite.CompanyName = projConAddr.Project_Contact__r.Company__c;
                                addressSite.Address1 = projConAddr.Address__r.Address_1__c;
                                addressSite.Address2 = projConAddr.Address__r.Address_2__c;
                                addressSite.City = projConAddr.Address__r.City__c;
                                addressSite.State = projConAddr.Address__r.State_Province__c;
                                addressSite.PostalCode = projConAddr.Address__r.Zip__c;
                                addressSite.Country = projConAddr.Address__r.Country__c;
                                addressSite.Phone = projConAddr.Project_Contact__r.Navigator_Contact__r.Phone__c;
                                addressSite.Fax = projConAddr.Project_Contact__r.Navigator_Contact__r.Fax__c;
                                addressSite.Email = projConAddr.Project_Contact__r.Email__c;
                                addressSite.IsPrimary = String.valueOf(projConAddr.Is_Primary__c);
                                //I-224812 - SS
                                addressSite.Title = projConAddr.Project_Contact__r.Title__c;
                                addressSiteLst.add(addressSite);

                            }else if((contactRole == ORDER_SHIP_TO && !projConAddr.Is_Primary__c) || (contactRole == CUSTOMER && !projConAddr.Is_Primary__c) ||
                                    (contactRole == SITE_OWNER && !projConAddr.Is_Primary__c) ||
                                    (contactRole != ORDER_SHIP_TO && contactRole != CUSTOMER && contactRole != SITE_OWNER)){
                                boolean addElement  = true;
                                addressOther = new SelNav_DocGenServiceWrappper.cls_OtherAddresses();
                                addressOther.ProjectRole = contactRole;
                                addressOther.ContactName = projConAddr.Project_Contact__r.First_Name__c+' '+projConAddr.Project_Contact__r.Last_Name__c;
                                for(SelNav_DocGenServiceWrappper.cls_User loggedInUser :  usrLst){
                                    if(loggedInUser.ContactName == addressOther.ContactName && projConAddr.Is_Primary__c){
                                        addElement = false;
                                    } 
                                }
                                // Modified by Rakshit for task T-509869
                                addressOther.AddressId = projConAddr.Address__c == null ? '' : projConAddr.Address__c;
                                addressOther.CompanyName = projConAddr.Project_Contact__r.Company__c;
                                addressOther.Address1 = projConAddr.Address__r.Address_1__c;
                                addressOther.Address2 = projConAddr.Address__r.Address_2__c;
                                addressOther.City = projConAddr.Address__r.City__c;
                                addressOther.State = projConAddr.Address__r.State_Province__c;
                                addressOther.PostalCode = projConAddr.Address__r.Zip__c;
                                addressOther.Country = projConAddr.Address__r.Country__c;
                                addressOther.Phone = projConAddr.Project_Contact__r.Navigator_Contact__r.Phone__c;
                                addressOther.Fax = projConAddr.Project_Contact__r.Navigator_Contact__r.Fax__c;
                                addressOther.Email = projConAddr.Project_Contact__r.Email__c;
                                addressOther.IsPrimary = String.valueOf(projConAddr.Is_Primary__c);
                                //I-224812 - SS
                                addressOther.Title = projConAddr.Project_Contact__r.Title__c;
                                if(addElement){
                                    addressOtherLst.add(addressOther);
                                }  
                            }
                        }  
            }

            address.ShipTo = addressShipToLst;
            address.User = usrLst;
            address.Customer = addressCustomerLst;
            address.Site = addressSiteLst;
            address.OtherAddresses =  addressOtherLst;
            //Populate values for Address element Wrapper - End

            docGenWrapper = new SelNav_DocGenServiceWrappper();
            //Map Data to Wrapper Element
            docGenWrapper.Address = address;
            docGenWrapper.DocGenDate = docGenDateLst;
            docgenWrapper.Company = company;
            docGenWrapper.OrderInfo = orderInfo;
            docGenWrapper.EstimateSummary = estimateSummary;

            return new ReturnClass('200',true,'',docGenWrapper);


        } catch(Exception e){
            return new ReturnClass('202',false, e.getMessage(), null);

        }

    }

    //Http Get method
    //Params: null
    //Returns : List of SelNav_DocGenServiceWrappper.cls_User
    private static list<SelNav_DocGenServiceWrappper.cls_User> createUserAddress(Estimate__c estimate){
        SelNav_DocGenServiceWrappper.cls_User user;
        list<SelNav_DocGenServiceWrappper.cls_User> usrLst = new list<SelNav_DocGenServiceWrappper.cls_User>();
        list<Navigator_Contact__c> navigatorContactLst = new list<Navigator_Contact__c>();
        //I-224812 - SS - Added Title to query
        for(Project_Contact_Address__c projConAddr : [SELECT Project_Contact__c,Address__r.Address_1__c,Project_Contact__r.Contact_Role__c,
                                                      Address__r.Address_2__c,Address__r.Country__c,Address__r.Zip__c,
                                                      Address__r.City__c,Address__r.State_Province__c,
                                                      Project_Contact__r.Navigator_Contact__r.First_Name__c, Project_Contact__r.Navigator_Contact__r.Last_Name__c,
                                                      Project_Contact__r.Company__c,Project_Contact__r.Navigator_Contact__r.Phone__c,Project_Contact__r.Navigator_Contact__r.Fax__c,
                                                      Project_Contact__r.Email__c,Is_Primary__c,Project_Contact__r.Title__c
                                                      FROM Project_Contact_Address__c
                                                      WHERE Project_Contact__r.Navigator_Contact__r.User__c = :UserID 
                                                      AND Project_Contact__r.Project__c = :estimate.Project__c
                                                      AND Is_Primary__c = true  ]){
            user = new SelNav_DocGenServiceWrappper.cls_User();
            // Modified by Rakshit for task T-509869
            user.AddressId = projConAddr.Address__c == null ? '' : projConAddr.Address__c;
            user.ProjectRole = projConAddr.Project_Contact__r.Contact_Role__c;
            user.ContactName = projConAddr.Project_Contact__r.Navigator_Contact__r.First_Name__c+' '+projConAddr.Project_Contact__r.Navigator_Contact__r.Last_Name__c;
            user.CompanyName = projConAddr.Project_Contact__r.Company__c;
            user.Address1 = projConAddr.Address__r.Address_1__c;
            user.Address2 = projConAddr.Address__r.Address_2__c;
            user.City = projConAddr.Address__r.City__c;
            user.State = projConAddr.Address__r.State_Province__c;
            user.PostalCode = projConAddr.Address__r.Zip__c;
            user.Country = projConAddr.Address__r.Country__c;
            user.Phone = projConAddr.Project_Contact__r.Navigator_Contact__r.Phone__c;
            user.Fax = projConAddr.Project_Contact__r.Navigator_Contact__r.Fax__c;
            user.Email = projConAddr.Project_Contact__r.Email__c;
            user.IsPrimary = String.valueOf(projConAddr.Is_Primary__c);
            //I-224812 - SS
            user.Title = projConAddr.Project_Contact__r.Title__c;
            usrLst.add(user);                                           
        }
        if(usrLst.size() == 0) { // if no project contact address for this project send address of navigator contact of this project
            navigatorContactLst = [SELECT First_Name__c, Last_Name__c, Street__c, City__c ,State__c,
                                   Zip__c, Country__c, Phone__c, Fax__c, Email__c,Navigator_Account__c
                                   FROM Navigator_Contact__c
                                   WHERE User__c =:UserID];
            set<Id> navConIdSet  = new set<Id>();
            for(Navigator_Contact__c navigatorContact : navigatorContactLst){
                navConIdSet.add(navigatorContact.Id);
            }

            map<Id,Address__c> navConAddressMap = new map<Id,Address__c>(); //map of nav contact and primary address of that nav contact
            for(Address__c add : [SELECT Id , Navigator_Contact__c, Primary__c FROM Address__c WHERE Navigator_Contact__c IN :navConIdSet]){
                if(!navConAddressMap.containsKey(add.Navigator_Contact__c) && add.Primary__c == true ){
                    navConAddressMap.put(add.Navigator_Contact__c,add);
                }
            }

            for(Navigator_Contact__c navigatorContact : navigatorContactLst){
                user = new SelNav_DocGenServiceWrappper.cls_User();
                if(navConAddressMap.containsKey(navigatorContact.Id)){
                    user.AddressId = navConAddressMap.get(navigatorContact.Id).Id;
                } else{
                    user.AddressId = '';  // if no primary address for this navigator contact send address id blank
                }
                user.ContactName = navigatorContact.First_Name__c+' '+navigatorContact.Last_Name__c;
                user.Address1 = navigatorContact.Street__c;
                user.City = navigatorContact.City__c;
                user.State = navigatorContact.State__c;
                user.PostalCode = navigatorContact.Zip__c;
                user.Country = navigatorContact.Country__c;
                user.Phone = navigatorContact.Phone__c;
                user.Fax = navigatorContact.Fax__c;
                user.Email = navigatorContact.Email__c;
                usrLst.add(user);                                           
            } 
        }else{
            navigatorContactLst = [SELECT Navigator_Account__c
                                   FROM Navigator_Contact__c
                                   WHERE User__c =: UserID];
        }
        //create description and margin map for product group pricing
        if(navigatorContactLst.size() > 0){

            for(Product_Group_Pricing__c profGrpPrice : [SELECT Product_Group__r.Description__c, Markup__c
                                                         FROM Product_Group_Pricing__c
                                                         WHERE Navigator_Account__c =: navigatorContactLst.get(0).Navigator_Account__c]){
                descriptionMarkupMap.put(profGrpPrice.Product_Group__r.Description__c, profGrpPrice.Markup__c);
            }
        }

        return usrLst;
    }
    //Get OrderInfo Records
    //Params: Estimate Record
    //Returns : SelNav_DocGenServiceWrappper.cls_OrderInfo Record
    public static SelNav_DocGenServiceWrappper.cls_OrderInfo populateOrderInfoValues(Estimate__c estimate){
        SelNav_DocGenServiceWrappper.cls_OrderInfo orderInfo = new SelNav_DocGenServiceWrappper.cls_OrderInfo();
        //Populate values for OrderInfo element Wrapper - Start
        orderInfo.Comments = estimate.Project__r.Comments__c;
        orderInfo.PONumber = estimate.Project__r.PO_Number__c;
        orderInfo.OrderDate = String.valueOf(estimate.Project__r.Order_Date__c);
        orderInfo.MarkShipment = estimate.Project__r.Mark_Shipment__c;
        orderInfo.DockDate = String.valueOf(estimate.Project__r.Requested_Dock_Date__c);
        //Populate values for OrderInfo element Wrapper - End
        return orderInfo;    
    }

    //Get Date Value Fields Records
    //Params: Estimate Record
    //Returns : List of list<SelNav_DocGenServiceWrappper.cls_Date> Record
    private static list<SelNav_DocGenServiceWrappper.cls_Date> populateDateValues(Estimate__c estimate){
        SelNav_DocGenServiceWrappper.cls_Date projCreateDate = new SelNav_DocGenServiceWrappper.cls_Date();
        SelNav_DocGenServiceWrappper.cls_Date proposalDueDate = new SelNav_DocGenServiceWrappper.cls_Date();
        SelNav_DocGenServiceWrappper.cls_Date bookedDate = new SelNav_DocGenServiceWrappper.cls_Date();
        SelNav_DocGenServiceWrappper.cls_Date submittalDueDate = new SelNav_DocGenServiceWrappper.cls_Date();
        SelNav_DocGenServiceWrappper.cls_Date completionDate = new SelNav_DocGenServiceWrappper.cls_Date();
        list<SelNav_DocGenServiceWrappper.cls_Date> docGenDateLst = new list<SelNav_DocGenServiceWrappper.cls_Date>();

        //Populate values for DocGenDate element for wrapper -- Start
        projCreateDate.DateIdentifier = PROJECT_CREATE_DATE_DI;
        //Update to use createDate - I-223438 - SS
        projCreateDate.DateValue = String.valueOf(estimate.Project__r.CreatedDate);
        projCreateDate.DisplayName = PROJECT_CREATE_DATE_DISPLAY;
        docGenDateLst.add(projCreateDate);

        proposalDueDate.DateIdentifier = PROPOSAL_DUE_DATE_DI;
        proposalDueDate.DateValue = String.valueOf(estimate.Project__r.Proposal_Due_Date__c);
        proposalDueDate.DisplayName = PROPOSAL_DUE_DATE_DISPLAY;
        docGenDateLst.add(proposalDueDate);

        bookedDate.DateIdentifier = BOOKED_DATE_DI;
        bookedDate.DateValue = String.valueOf(estimate.Project__r.Booked_Date__c);
        bookedDate.DisplayName = BOOKED_DATE_DISPLAY;
        docGenDateLst.add(bookedDate);

        submittalDueDate.DateIdentifier = SUBMITTAL_DUE_DATE_DI;
        submittalDueDate.DateValue = String.valueOf(estimate.Project__r.Submittal_Due_Date__c);
        submittalDueDate.DisplayName = SUBMITTAL_DUE_DATE_DISPLAY;
        docGenDateLst.add(submittalDueDate);

        completionDate.DateIdentifier = COMPLETION_DATE_DI;
        completionDate.DateValue = String.valueOf(estimate.Project__r.Completion_Date__c);
        completionDate.DisplayName = COMPLETION_DATE_DISPLAY;
        docGenDateLst.add(completionDate);
        //Populate values for DocGenDate element for wrapper -- End

        return docGenDateLst;

    }

    public static SelNav_DocGenServiceWrappper.cls_Company populateCompanyValues(Estimate__c estimate){
        SelNav_DocGenServiceWrappper.cls_Company company = new SelNav_DocGenServiceWrappper.cls_Company();
        if(estimate.Project__r.Project_Navigator_Account__c != null){
            Navigator_Account__c navAcc = new Navigator_Account__c();
            list<Attachment> companyLogo;
            navAcc = [  SELECT Id, Copyright_Notice__c,Customer_Number__c, Logo_Path__c,
                        Scope_Of_Work__c, Warranty__c, Training__c, Exclusions__c, Terms_And_Conditions__c
                        FROM  Navigator_Account__c 
                        WHERE Id = :estimate.Project__r.Project_Navigator_Account__c ];
            //Get company logo.
            if(navAcc != null){
                //Select Company logo from navigator account.
                companyLogo = [SELECT Id, ParentId, Name, body, ContentType
                               FROM Attachment 
                               WHERE ParentId = : estimate.Project__r.Project_Navigator_Account__c
                               AND Name =: COMPANY_LOGO_NAME
                               ORDER BY CreatedDate DESC ];
                //Check if logo exists on Navigator Account.               
                if(companyLogo != null  && companyLogo.size() > 0 && companyLogo.get(0).Body != null){
                    //Assign logo to Company Logo.
                    company.CompanyLogo = EncodingUtil.base64Encode(companyLogo.get(0).body);
                }else{
                    //Fetch default logo from project profile.
                    companyLogo = [SELECT Id, ParentId, Name, body, ContentType
                                   FROM Attachment 
                                   WHERE ParentId = : estimate.Project__r.Project_Profile__c
                                   AND Name =: DEFAULT_LOGO_NAME
                                   ORDER BY CreatedDate DESC ];
                    if(companyLogo != null && companyLogo.size() > 0 && companyLogo.get(0).Body != null){
                        //Assign logo to CompanyLogo.
                        company.CompanyLogo = EncodingUtil.base64Encode(companyLogo.get(0).body);
                    }
                }   
            }    
            //Populate values for Company element for wrapper -- Start 
            company.CopyRightNotice =  navAcc.Copyright_Notice__c; // 'Johnson Controls';
            company.CustomerNo = navAcc.Customer_Number__c;//'12233355';
            company.ScopeOfWork = navAcc.Scope_Of_Work__c; //'XXXyyXXX';
            company.Warranty = navAcc.Warranty__c;// 'Our company warrants that the equipment manufactured by it shall be free from defects in material and workmanship arising from normal usage...';
            company.Training = navAcc.Training__c; //'We will provide sufficient training to get the purchaser knowledgeable on the operation and maintenance of all the systems listed above...';
            company.Exclusions = navAcc.Exclusions__c; //'This proposal does not include ...';
            company.TermsAndConditions = navAcc.Terms_And_Conditions__c;
            //Populate values for Company element for wrapper -- End
        }
        return company;

    }


    //Wrapper class to return detailed response 
    global class ReturnClass {

        global Boolean success;
        global String errorMessage;
        global String statusCode;
        global SelNav_DocGenServiceWrappper docGenWrap;

        //wrapper constructor
        global ReturnClass(String statusCode,Boolean success ,String errorMessage, SelNav_DocGenServiceWrappper wrapper){
            docGenWrap = new SelNav_DocGenServiceWrappper();

            this.success = success;
            this.errorMessage = errorMessage;
            this.statusCode = statusCode;
            docGenWrap = wrapper;
        }

    }
}